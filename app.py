import streamlit as st
from PIL import Image
import sqlite3
import requests
from twilio.rest import Client
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import folium
import time 
import smtplib
from email.mime.text import MIMEText
from streamlit_folium import folium_static
# Couleurs et style
st.set_page_config(page_title="EcoTrace", layout="wide", initial_sidebar_state="expanded")

#---------------------------------------------------------#

# Fonction pour r√©cup√©rer les actualit√©s via l'API Mediastack en fonction d'un mot-cl√©
def get_climate_news(keyword):
    API_KEY = "a5e893cdb521e63052bf12eeafb0737c"  # Remplace avec ta cl√© API Mediastack
    url = f"http://api.mediastack.com/v1/news?access_key={API_KEY}&categories=general&keywords={keyword}"
    response = requests.get(url)
    if response.status_code == 200:
        news_data = response.json()
        return news_data['data']
    else:
        return None

# CSS pour le style du logo (alignement et taille)
st.markdown("""
    <style>
    .logo-container {
        display: flex;
        align-items: left;
        justify-content: left;
        margin-bottom: 20px;
    }
    .logo-container img {
        width: 150px;  /* Ajuste la taille ici */
        height: auto;
    }
    </style>
    """, unsafe_allow_html=True)

# Onglet Accueil avec le logo anim√©
def display_accueil():
    # Afficher le logo anim√© √† gauche
    st.markdown("""
    <div class="logo-container">
        <img src="C:/Users/patrick/Downloads/Ecotrace_web/logo.gif" alt="EcoTrace Logo">
    </div>
    """, unsafe_allow_html=True)

    # Contenu principal de l'accueil
    st.title("Bienvenue sur EcoTrace")
    st.write("""
        **EcoTrace** est une plateforme num√©rique innovante qui simplifie la gestion des d√©chets recyclables  au Cameroun. 
        En facilitant le recyclage et la r√©duction des d√©chets, EcoTrace contribue √† un environnement plus propre et √† une √©conomie verte durable. 
        Les utilisateurs peuvent non seulement signaler leurs d√©chets, mais aussi suivre leur collecte en temps r√©el et gagner des r√©compenses pour leur participation active.
    """)

    # Section Recherche des actualit√©s sur la Justice Climatique
    st.subheader("Recherchez des actualit√©s sur la Justice Climatique")
    
    # Ajout d'une barre de recherche pour les actualit√©s
    keyword = st.text_input("Entrez un mot-cl√© pour rechercher des actualit√©s", value="climate change")
    
    if keyword:
        st.write(f"R√©sultats pour : {keyword}")
        news = get_climate_news(keyword)

        if news:
            for article in news[:5]:  # Limiter √† 5 articles
                st.markdown(f"**[{article['title']}]({article['url']})**")
                st.write(f"*Source : {article['source']} | Date : {article['published_at']}*")
                st.write(f"{article['description']}")

                # Affichage conditionnel de l'image
                if article.get('image'):
                    st.image(article['image'], use_column_width=True)
                else:
                    st.write("Pas d'image disponible")
                
                st.write("---")
        else:
            st.error("Erreur de chargement des actualit√©s. Veuillez r√©essayer plus tard.")
    else:
        st.write("Entrez un mot-cl√© pour afficher les r√©sultats.")

        #________++++++++++++++++++++++++++++++++++++++++++++++______________+++++++++++++++
               
    # Fonction pour envoyer un SMS
# Configuration Twilio
account_sid = 'AC4e99121e3b36cc59ecc10d595dced23e'  # Remplace par ton SID de compte Twilio
auth_token = 'c164df4c76938fd563695177b944b68a'  # Remplace par ton token d'authentification Twilio
twilio_phone_number = '+13346058063'  # Num√©ro Twilio pour l'envoi de SMS
your_phone_number = '+237673281383'  # Num√©ro o√π le SMS sera envoy√©
client = Client(account_sid, auth_token)

# Fonction pour envoyer un SMS
def send_sms(body):
    try:
        # Envoie le message √† ton propre num√©ro
        message = client.messages.create(
            body=body,
            from_=twilio_phone_number,
            to=your_phone_number  # Utilise ton propre num√©ro ici
        )
        return True
    except Exception as e:
        st.error(f"Erreur lors de l'envoi du SMS : {e}")
        return False
    
# Onglet Signaler des D√©chets
def display_signal_dechets():
    st.title("Signaler des D√©chets")

    # Formulaire de signalement
    with st.form("report_form"):
        type_dechets = st.selectbox("Type de D√©chets", ["Plastique", "Verre", "M√©tal", "Papier", "Autre"])
        quantite = st.number_input("Quantit√©", min_value=1, placeholder="Entrez la quantit√© de d√©chets")
        description = st.text_area("Description", placeholder="D√©crivez les d√©chets signal√©s et votre numero money")
        adresse = st.text_input("Votre Adresse", placeholder="Entrez votre adresse  ici")
        
        submit_button = st.form_submit_button("Signaler")

        if submit_button:
            # Construire le message √† envoyer
            body = f"""
            Type de D√©chets: {type_dechets}
            Quantit√©: {quantite}
            Description: {description}
            Adresse: {adresse}
            """
            if send_sms(body):
                st.success("Votre signalement a √©t√© envoy√© avec succ√®s !")
            else:
                st.error("√âchec de l'envoi du signalement.")
#----------------------------------------------------------###############################################################

# Connexion √† la base de donn√©es SQLite
def connect_db():
    conn = sqlite3.connect('ecotrace.db')
    return conn

# Fonction pour r√©cup√©rer les donn√©es de collecte depuis SQLite
def get_collecte_data_from_db():
    conn = connect_db()
    query = "SELECT zone, type_dechets, quantite_kg, progres_percent, latitude, longitude, image_url FROM collecte_dechets"
    data = pd.read_sql_query(query, conn)
    conn.close()
    return data

# Fonction pour afficher les notifications (par exemple : collecte termin√©e, retard)
def send_notification(type, zone):
    if type == "retard":
        st.warning(f"La collecte dans la zone {zone} est en retard.")
    elif type == "termin√©e":
        st.success(f"La collecte dans la zone {zone} est termin√©e.")

# Fonction pour afficher les donn√©es de collecte avec carte et photos
def display_suivi_collecte():
    st.title("Suivi de la Collecte")

    # Charger les donn√©es depuis la base de donn√©es SQLite
    data = get_collecte_data_from_db()

    # Filtre pour le type de d√©chets ou la zone
    st.sidebar.subheader("Filtrer les collectes")
    selected_zone = st.sidebar.selectbox("S√©lectionner une zone", data["zone"].unique())
    selected_type_dechets = st.sidebar.selectbox("S√©lectionner le type de d√©chets", data["type_dechets"].unique())
    
    # Filtrer les donn√©es en fonction des s√©lections
    filtered_data = data[(data["zone"] == selected_zone) & (data["type_dechets"] == selected_type_dechets)]

    # Notifications Push pour retard ou collecte termin√©e
    for i, row in filtered_data.iterrows():
        if row['progres_percent'] < 100:
            send_notification("retard", row['zone'])
        else:
            send_notification("termin√©e", row['zone'])
    
    # Carte interactive pour suivre les camions de collecte
    st.subheader("Carte en Temps R√©el des Collectes")
    m = folium.Map(location=[3.8480, 11.502], zoom_start=13)
    
    for i, row in filtered_data.iterrows():
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=f"Zone: {row['zone']}<br>Progr√®s: {row['progres_percent']}%<br>Type de D√©chets: {row['type_dechets']}",
            tooltip=row['zone'],
            icon=folium.Icon(color="green" if row["progres_percent"] == 100 else "orange"),
        ).add_to(m)
    
    folium_static(m)
    
    # Graphique interactif des d√©chets collect√©s par zone
    st.subheader(f"Graphique des D√©chets Collect√©s pour {selected_zone}")
    fig = px.bar(filtered_data, x="zone", y="quantite_kg", color="progres_percent", 
                 title="Quantit√© de D√©chets Collect√©s par Zone",
                 labels={"quantite_kg": "D√©chets Collect√©s (kg)"})
    st.plotly_chart(fig)

    # Afficher la progression de la collecte
    st.subheader(f"Progression de la Collecte pour {selected_zone}")
    for i, row in filtered_data.iterrows():
        st.progress(row['progres_percent'])

    # Affichage des photos des zones collect√©es
    st.subheader(f"Photos des zones collect√©es ({selected_zone})")
    for i, row in filtered_data.iterrows():
        if row["image_url"]:
            st.image(row["image_url"], caption=f"Photo de {row['zone']}", use_column_width=True)
        else:
            st.info(f"Aucune image disponible pour {row['zone']}.")

        #-------------------------------------------------------3----------------------------------------------

        # Connexion √† la base de donn√©es SQLite ecotrace.db
conn = sqlite3.connect('ecotrace.db')
cursor = conn.cursor()

# Fonction pour afficher les r√©compenses d'un utilisateur
def afficher_recompenses(utilisateur):
    # Requ√™te pour r√©cup√©rer les r√©compenses depuis la table 'rewards'
    cursor.execute('SELECT * FROM rewards WHERE utilisateur=?', (utilisateur,))
    recompenses = cursor.fetchall()
    
    if recompenses:
        st.subheader(f"üéâ R√©compenses pour {utilisateur} üéâ")
        
        # Animation simul√©e lors de l'affichage des r√©compenses
        progress_bar = st.progress(0)
        for index, recompense in enumerate(recompenses):
            progress = (index + 1) / len(recompenses)
            time.sleep(0.5)  # Simuler un d√©lai pour l'animation
            progress_bar.progress(int(progress * 100))
            
            st.write(f"üèÖ **R√©compense ID**: {recompense[0]}")
            st.write(f"‚≠ê **Points**: {recompense[2]}")
            st.write(f"üíµ **Montant (FCFA)**: {recompense[3]}")
            st.write(f"üí¨ **Description**: {recompense[4]}")
            st.write("‚Äî‚Äî‚Äî")
        
        progress_bar.empty()  # Supprimer la barre de progression une fois termin√©
    else:
        st.write(f"‚ùå Aucune r√©compense trouv√©e pour **{utilisateur}**.")

# Onglet R√©compenses
def display_recompenses():
    st.title("üèÜ R√©compenses")

    # S√©lection de l'utilisateur pour voir ses r√©compenses
    utilisateur = st.text_input("üîç Entrez votre nom d'utilisateur pour consulter vos r√©compenses")
    
    if utilisateur:
        afficher_recompenses(utilisateur)
    
    st.subheader("üí° Comment gagner des r√©compenses ?")
    st.write("""
    - üóëÔ∏è **Signaler des d√©chets** : Chaque fois que vous signalez des d√©chets collect√©s, vous gagnez des points.
    - ü§ù **Participer √† des collectes** : Vous pouvez gagner plus de points en participant aux collectes organis√©es.
    - üéÅ **R√©compenses Bonus** : Gagnez des points suppl√©mentaires en signalant des d√©chets dans des zones sp√©cifiques ou en participant √† des √©v√©nements sp√©ciaux.
    """)


    #______________________________________________________#______________________________________________________________

# Connexion √† la base de donn√©es SQLite ecotrace.db
conn = sqlite3.connect('ecotrace.db')
cursor = conn.cursor()

# Fonction pour r√©cup√©rer les donn√©es de collecte
def get_collecte_data():
    cursor.execute('SELECT type_dechets, SUM(quantite_kg) as total_kg FROM collecte_dechets GROUP BY type_dechets')
    data = cursor.fetchall()
    return pd.DataFrame(data, columns=['Type de D√©chets', 'Total KG'])

def get_volume_total():
    cursor.execute('SELECT SUM(quantite_kg) FROM collecte_dechets')
    return cursor.fetchone()[0] or 0

# Fonction pour afficher les statistiques
def display_statistics():
    st.title("üìä Statistiques et Analyses")

    # R√©cup√©rer les donn√©es de collecte
    collecte_df = get_collecte_data()
    total_volume = get_volume_total()

    # Disposition des graphiques en trois colonnes
    col1, col2, col3 = st.columns(3)

    if not collecte_df.empty:
        # Graphique √† barres - Volume de d√©chets recycl√©s par type
        with col1:
            st.subheader("üìà Volume de d√©chets par type")
            fig1, ax1 = plt.subplots()
            ax1.bar(collecte_df['Type de D√©chets'], collecte_df['Total KG'], color='skyblue')
            ax1.set_xlabel("Type de D√©chets")
            ax1.set_ylabel("Volume Recycl√© (KG)")
            ax1.set_title("Volume de d√©chets recycl√©s par type")
            plt.xticks(rotation=45)
            st.pyplot(fig1)

        # Graphique √† secteurs - R√©partition des d√©chets par type
        with col2:
            st.subheader("üç∞ R√©partition des d√©chets par type")
            fig2, ax2 = plt.subplots()
            ax2.pie(collecte_df['Total KG'], labels=collecte_df['Type de D√©chets'], autopct='%1.1f%%', startangle=90)
            ax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
            st.pyplot(fig2)

        # Graphique lin√©aire - Volume total de d√©chets au fil du temps
        # Remplacer avec vos donn√©es temporelles si disponibles
        # Ici, on simule des donn√©es temporelles
        dates = pd.date_range(start='2023-01-01', periods=len(collecte_df), freq='M')
        simulated_volumes = collecte_df['Total KG'].cumsum()  # Volume cumulatif pour l'exemple

        with col3:
            st.subheader("üìä Volume total de d√©chets au fil du temps")
            fig3, ax3 = plt.subplots()
            ax3.plot(dates, simulated_volumes, marker='o', color='green')
            ax3.set_xlabel("Date")
            ax3.set_ylabel("Volume Cumul√© (KG)")
            ax3.set_title("Volume total de d√©chets au fil du temps")
            plt.xticks(rotation=45)
            st.pyplot(fig3)

    else:
        st.write("‚ùå Aucune donn√©e de collecte disponible.")

        #-------------------------------------------------------#_____________________________________________________

        # Fonction pour envoyer un email
def envoyer_email(nom, email, message):
    try:
        # Configuration de l'email
        msg = MIMEText(f"Nom: {nom}\nEmail: {email}\nMessage: {message}")
        msg['Subject'] = 'Nouveau message de support'
        msg['From'] = 'votre_email@example.com'  # Remplacez par votre adresse email
        msg['To'] = email  # Adresse email de l'utilisateur qui a soumis le formulaire

        # Connexion au serveur SMTP
        with smtplib.SMTP('smtp.example.com', 587) as server:  # Remplacez par votre serveur SMTP
            server.starttls()
            server.login('votre_email@example.com', 'votre_mot_de_passe')  # Authentifiez-vous
            server.send_message(msg)

        return True
    except Exception as e:
        st.error(f"Erreur lors de l'envoi de l'email : {e}")
        return False

# Onglet Contact et Assistance
def display_contact_assistance():
    st.title("üìû Contact et Assistance")

    # Informations de contact
    st.header("Informations de Contact")
    st.write("Pour toute question ou assistance, vous pouvez nous contacter par les moyens suivants :")
    st.write("- **Email :** patcelest237@gmail.com")
    st.write("- **T√©l√©phone :** +237 620 705 361")
    st.write("- **Adresse :** 123 Rue de l'Ecologie, Yaound√©, Cameroun")

    # Section FAQ
    st.header("üìö FAQ")
    st.write("Voici quelques questions fr√©quemment pos√©es :")
    
    faqs = {
        "Q1: Comment signaler des d√©chets ?": "Vous pouvez signaler des d√©chets en utilisant l'onglet 'Signaler des D√©chets' de notre application.",
        "Q2: Comment gagner des r√©compenses ?": "Gagnez des r√©compenses en signalant des d√©chets et en participant √† nos collectes.",
        "Q3: Quelles sont les zones couvertes par le service ?": "Nous couvrons actuellement plusieurs zones √† Yaound√©. Consultez notre carte dans l'onglet 'Suivi de la Collecte'.",
        "Q4: Comment puis-je participer √† une collecte ?": "Les annonces de collecte sont publi√©es sur notre application. Restez √† l'aff√ªt des notifications !",
        "Q5: Que faire si je rencontre un probl√®me avec l'application ?": "Vous pouvez nous contacter via ce formulaire ou consulter la FAQ pour plus d'informations."
    }

    for question, answer in faqs.items():
        st.write(f"**{question}**")
        st.write(answer)

    # Formulaire de support
    st.header("üÜò Formulaire de Support")
    with st.form("support_form"):
        nom = st.text_input("Votre Nom")
        email = st.text_input("Votre Email")
        message = st.text_area("Votre Message ou Question")
        submit_button = st.form_submit_button("Envoyer")

        if submit_button:
            if envoyer_email(nom, email, message):
                st.success("Votre message a √©t√© envoy√© avec succ√®s ! Nous vous contacterons bient√¥t.")

#-----------------------------------#_----------------------------------------------------------------------

# Custom CSS

st.markdown("""
    <style>
    body {
        font-family: 'Helvetica', sans-serif;
        color: #2E7D32;
    }
    .stButton>button {
        background-color: #2E7D32;
        color: white;
        border-radius: 10px;
    }
    .stButton>button:hover {
        background-color: #1B5E20;
        color: white;
    }
    h1 {
        color: #1B5E20;
    }
    h2 {
        color: #388E3C;
    }
    </style>
    """, unsafe_allow_html=True)





# Onglets principaux
tabs = ["Accueil", "Signaler des D√©chets", "Suivi de la Collecte", "R√©compenses", "Statistiques et Analyses", "Contact et Assistance"]
page = st.sidebar.selectbox("Navigation", tabs)

# Accueil
if page == "Accueil":
     display_accueil()
    

# Signaler des D√©chets
elif page == "Signaler des D√©chets":
    display_signal_dechets()
    
   

# Suivi de la Collecte
elif page == "Suivi de la Collecte":
    st.header("Suivi en temps r√©el des collectes")
    st.write("Bient√¥t disponible : Suivez vos collectes ici en temps r√©el.")
    display_suivi_collecte()

# R√©compenses
elif page == "R√©compenses":
    st.header("R√©compenses")
    st.write("Accumulez des points pour chaque signalement et transformez-les en r√©compenses mon√©taires ou en bons d'achat.")

     # Afficher l'onglet R√©compenses
    display_recompenses()




# Statistiques et Analyses
elif page == "Statistiques et Analyses":
   
    # Placeholder pour les graphiques futurs
    display_statistics()

# Contact et Assistance
elif page == "Contact et Assistance":
      display_contact_assistance()
